name: Docker CI

on:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Check out code
      - name: Check out repository
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Set up Docker compose
      - name: Install Docker Compose
        run: sudo apt-get install -y docker-compose
      
      # Build Docker images
      - name: Build Docker Compose services
        run: docker-compose build

      # Start Docker Compose services and run tests
      - name: Start services and run tests
        run: docker-compose up -d  # Start containers in detached mode
      
      - name: Wait for container to finish writing files
        run: sleep 3 

      - name: Display logs in the workflow
        run:  cat ./test-results/logs/test_log.txt
      
      - name: Check the contents of the artifacts directory
        run: |
          echo "Listing contents of test-result/artifacts directory"
          ls -la ./test-results/artifacts
          # Print any existing files for debugging
          cat ./test-result/artifacts/* || echo "No result files found"

      - name: Find the test result file
        id: find-file
        run: |
          echo "Searching for test result files in test-result/artifacts"
          # List files for debugging purposes
          ls -la ./test-result/artifacts

          # Look for the file named either 'succeeded' or 'fail'
          FILE=$(ls ./test-result/artifacts | grep -E 'succeeded|fail' || echo "no result file found")
          echo "Found test result file: $FILE"

          # If no file is found, exit with a custom error
          if [ "$FILE" == "no result file found" ]; then
            echo "No result file found in artifacts directory."
            exit 1
          fi
          
          # Save the file name to an environment variable for later use
          echo "artifact_name=$FILE" >> $GITHUB_ENV

      - name: Upload the test result artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact_name }}  # Dynamically set artifact name
          path: ./test-result/artifacts/${{ env.artifact_name }}  # Upload the file

      # Shut down Docker Compose services
      - name: Stop Docker Compose services
        run: docker-compose down
